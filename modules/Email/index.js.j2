{% raw %}
require('dotenv').config();
var net = require('net');
{% endraw %}

const branding = '{{ BRANDINGWOD }}';
{% raw %}
const usingSendgrid = process.env.SENDGRID_API_KEY;
const fromAddress = process.env.FROM_EMAIL_ADDRESS;

let PORT = '';
let APIDB = '';

const sendPostfixEmail = ({ location, recipient, subject, content }) => {
    PORT = process.env.POSTFIX_PORT;
    APIDB = process.env.WODAPIDBFQDN;
  
  return new Promise((resolve, reject) => {
    const client = new net.Socket();
    client.setTimeout(2000);
    const msg = `HELO ${APIDB}\nMAIL FROM: ${fromAddress}\nRCPT TO: ${recipient}\nDATA\nSubject: ${subject}\n${content}\n.\n`;
    client
      .connect(PORT, location, function () {
        console.log('CONNECTED TO: ' + location + ':' + PORT);
        console.log('message', msg);
        console.log('FROM: ' + fromAddress);
        // Write a message to the socket as soon as the client is connected, the server will receive it as message from the client
        // setTimeout(() => {
        client.write(msg);
        // }, 30000);
      })
      .on('error', function (error) {
        console.log('ERROR' + error.message);
        client.destroy();
        return reject(error);
      })
      .on('data', function (data) {
        console.log('DATA: ' + data);
        client.destroy();
        // Close the client socket completely
        // setTimeout(() => {
        //   client.destroy();
        // }, 30000);
        return resolve(recipient);
      })
      .on('close', function () {
        console.log('Connection closed');
        return resolve(recipient);
      });
  });
};

const sendEmail = ({
  location,
  sessionType,
  recipient,
  subject,
  content,
  proxy,
  credentialsEmail,
}) =>
  new Promise((resolve, reject) => {
    // add plain version for mobile device previews.
    console.log('inside send email');
    const contentPlainText = content.replace(/<(?:.|\n)*?>/gm, '');
    const fromToEMails = {};

	if ((!usingSendgrid) || (usingSendgrid === "None")) {
		// We don't use sendgrid but our postfix server
		sendPostfixEmail({
			location: location,
            recipient: recipient,
            subject: subject,
            content: contentPlainText,
          })
        .then(() => {
              console.log('sent postfix email');
              return resolve(recipient);
            })
        .catch((error) => {
              console.log('Promise sendPostfixEmail Rejected', error);
              return reject(error);
            });
    }

	// Here we use sendgrid
    if (credentialsEmail)
      fromToEMails.bcc = [
        {
          email: fromAddress,
        },
      ];
    if (recipient)
      fromToEMails.to = [
        {
          email: recipient,
        },
      ];
    if (subject) fromToEMails.subject = subject;

    const sg = require('sendgrid')(usingSendgrid);
    const request = sg.emptyRequest({
      method: 'POST',
      path: '/v3/mail/send',
      host: 'api.sendgrid.com',
      body: {
        personalizations: [fromToEMails],
        from: {
          name: `${branding} ${sessionType}`,
          email: `${fromAddress}`,
        },
        content: [
          {
            type: 'text/plain',
            value: contentPlainText,
          },
          {
            type: 'text/html',
            value: content,
          },
        ],
      },
    });
    if (proxy === 'hackshack') {
      console.log('*******request from WoD*********');
      sg.API(request, (error, response) => {
        if (error) {
          console.log('Error Response', JSON.stringify(response, null, 2));
          console.log(
            'Email Error response received',
            JSON.stringify(error, null, 2)
          );
          return reject(error);
        }
        return resolve(recipient);
      });
    } else {
      console.log('$$$$$$$$$$$$$request not from hack shack$$$$$$$$$$$$$$');
      return resolve(recipient);
    }
  });

export { sendEmail, sendPostfixEmail };
{% endraw %}
