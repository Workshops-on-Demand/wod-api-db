---
- name: Playbook for WoD api-db server installation
  hosts: all
  gather_facts: true
  tasks:
    - name: Base setup for a base system
      ansible.builtin.include_tasks: "{{ WODINSANSDIR }}/install_base_system.yml"

    - name: Ensure all required packages are installed
      become: true
      become_user: root
      ansible.builtin.package:
        name:
          - ansible
          - python3
          - python3-pip
          - git
          - rsync
          - wget
          - bzip2
          - jq
          - moreutils
          - net-tools
          - nodejs
          - npm
          - telnet
          - man
          - unzip
        update_cache: true
        state: present

    - name: Ensure all required DEB packages are installed
      become: true
      become_user: root
      ansible.builtin.apt:
        pkg:
          - apt-file
          - ldap-utils
          - fail2ban
          - libproc-processtable-perl
          - acct
          - libjson-perl
          - libdbi-perl
          - libdbd-pg-perl
          - libyaml-tiny-perl
          - postgresql-client
          - netcat-openbsd
      when:
        - ansible_os_family == "Debian"

    - name: Ensure all required RPM packages are installed
      become: true
      become_user: root
      ansible.builtin.package:
        pkg:
          - openldap-clients
          - perl-Crypt-PasswdMD5
          - fail2ban-all
          - perl-Proc-ProcessTable
          - perl-Data-Dumper
          - psacct
          - perl-JSON
          - perl-DBI
          - perl-DBD-Pg
          - perl-YAML-Tiny
          - postgresql
          - netcat
      when:
        - ansible_distribution == "CentOS" or ansible_distribution == "Rocky"

    - name: Ensure required directories under /usr/local are owned by "{{ WODUSER }}"
      become: true
      become_user: root
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: "0755"
      with_items:
        - /usr/local/bin
        - /usr/local/share

    - name: Deliver wod-build-seeders scripts under /usr/local/bin
      become: true
      become_user: root
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /usr/local/bin/{{ item | basename }}
        mode: "0755"
      with_fileglob: ["{{ WODSCRIPTDIR }}//wod-build-seeders.*"]

    - name: Disable WoD services
      become: true
      become_user: root
      ansible.builtin.systemd:
        state: stopped
        daemon_reload: true
        enabled: false
        name: "{{ item }}"
      ignore_errors: true
      register: ignore_errors_register
      with_items:
        - wod-kill-processes

    - name: Copy WoD service file as ansible template for variable expansion
      become: true
      become_user: root
      ansible.builtin.template:
        src: "{{ item }}"
        dest: /etc/systemd/system/{{ item | basename | regex_replace('\.j2$') }}
        mode: "0644"
      with_fileglob: ["{{ WODINSSYSDIR }}/wod-*.service.j2"]

    - name: Copy WoD api-db startup script as ansible template for variable expansion
      become: true
      become_user: root
      ansible.builtin.template:
        src: "{{ item }}"
        dest: /usr/local/bin/{{ item | basename | regex_replace('\.j2$') }}
        mode: "0755"
      with_fileglob: ["{{ WODINSSYSDIR }}/wod-npm-app.j2"]

    - name: Enable WoD service
      become: true
      become_user: root
      ansible.builtin.systemd:
        state: started
        daemon_reload: true
        enabled: true
        name: "{{ item }}"
      with_items:
        - wod-kill-processes

    - name: Setup ansible configuration
      ansible.builtin.copy:
        src: "{{ WODINSANSDIR }}/.ansible.cfg"
        dest: "{{ ansible_env.HOME }}/.ansible.cfg"
        owner: "{{ WODUSER }}"
        group: "{{ WODUSER }}"
        mode: "0644"

    - name: Setup fail2ban
      ansible.builtin.include_tasks: "{{ WODINSANSDIR }}/install_fail2ban.yml"

    # Call docker late to avoid creation of PGDATA dir with restrictive rights
    - name: Setup first the Docker context (packages, deps, ...)
      ansible.builtin.include_tasks: "{{ WODINSANSDIR }}/install_docker.yml"

    - name: Test private tasks YAML file
      ansible.builtin.command: ls "{{ WODANSIBLEPRIVDIR }}/install_api-db.yml"
      register: acj_path
      failed_when: false
      changed_when: false

    - name: Now call private tasks if available
      ansible.builtin.include_tasks: "{{ WODANSIBLEPRIVDIR }}/install_api-db.yml"
      when:
        - acj_path.rc == 0
